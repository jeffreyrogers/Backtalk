// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package db

import (
	"context"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (
  slug, author, content
) VALUES (
  $1, $2, $3
)
RETURNING id, created, slug, author, content
`

type CreateCommentParams struct {
	Slug    string
	Author  string
	Content string
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.Slug, arg.Author, arg.Content)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Slug,
		&i.Author,
		&i.Content,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteComment, id)
	return err
}

const getComments = `-- name: GetComments :many
SELECT id, created, slug, author, content FROM comments
WHERE slug = $1
ORDER BY created
`

func (q *Queries) GetComments(ctx context.Context, slug string) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getComments, slug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Slug,
			&i.Author,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
