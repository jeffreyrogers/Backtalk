package main

import (
	"context"
	"database/sql"
	"encoding/base64"
	"log"
	"net/http"
	"os"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/gorilla/csrf"
	"github.com/jeffreyrogers/backtalk/internal/handlers"
	"github.com/jeffreyrogers/backtalk/internal/models"
	"github.com/jeffreyrogers/backtalk/internal/sqlc"

	_ "github.com/lib/pq"
)

// `main()` is responsible for two things:
//
//     1. Setting up our connection to the database so that other packages can query it
//	   2. Setting up the routing
//
// All other functionality is handled in the route handlers or by go code generated by sqlc that interacts with the database.
func main() {
	models.Ctx = context.Background()

	_, isProd := os.LookupEnv("BACKTALK_DEV")
	authString := os.Getenv("BACKTALK_AUTH_KEY")
	authKey, err := base64.StdEncoding.DecodeString(authString)
	if err != nil {
		log.Fatal(err)
	}

	// most of the connection string arguments are handled via environment variables (e.g. PGHOST, PGPASS, etc.)
	models.DB, err = sql.Open("postgres", "application_name=backtalk idle_in_transaction_session_timeout=10000 statement_timeout=10000")
	if err != nil {
		log.Fatal(err)
	}

	// I have no idea if this is an appropriate number or not. Will have to benchmark to check, but doesn't matter for now.
	models.DB.SetMaxOpenConns(20)
	models.Queries = sqlc.New(models.DB)

	r := chi.NewRouter()
	r.Use(middleware.Logger)
	r.Get("/", handlers.Home)
	r.Get("/health", handlers.HealthCheck)

	// REST API
	r.Route("/comments", func(r chi.Router) {
		r.Post("/{slug}", handlers.CreateComment)
		r.Get("/{slug}", handlers.GetComments)
		r.Delete("/{slug}/{id}", handlers.DeleteComment)
		r.Put("/{slug}/{id}", handlers.EditComment)
	})

	r.Mount("/admin", adminRouter())

	options := csrf.Secure(isProd)
	CSRF := csrf.Protect(authKey, options)

	log.Println("Starting server on port 8000")
	http.ListenAndServe(":8000", CSRF(r))
}

func adminRouter() http.Handler {
	r := chi.NewRouter()
	r.Use(handlers.AdminOnly)
	r.Get("/", handlers.AdminHome)
	return r
}
